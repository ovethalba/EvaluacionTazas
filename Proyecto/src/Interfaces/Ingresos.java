package Interfaces;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Oveth
 */
public class Ingresos extends javax.swing.JInternalFrame {

    private String url = "tazas.db";
    private Connection connect;

    public Ingresos() {
        initComponents();

        //Inicializar JInternalFrame con la tabla
        RellenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldCalidad = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldColor = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldAncho = new javax.swing.JTextField();
        jTextFieldAlto = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldLargo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldModelo = new javax.swing.JTextField();
        jTextFieldMaterial = new javax.swing.JTextField();
        jTextFieldCapacidad = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButtonIngresar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableIngresos = new javax.swing.JTable();
        jTextFieldCantidad = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();

        setClosable(true);
        setTitle("Ingresos");

        jLabel1.setText("Calidad");

        jTextFieldCalidad.setText("Alta");

        jLabel2.setText("Color");

        jTextFieldColor.setText("Dorado");
        jTextFieldColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldColorActionPerformed(evt);
            }
        });

        jLabel3.setText("Dimensiones");

        jLabel4.setText("Ancho");

        jTextFieldAncho.setText("5");
        jTextFieldAncho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldAnchoActionPerformed(evt);
            }
        });

        jTextFieldAlto.setText("7");

        jLabel5.setText("Alto");

        jTextFieldLargo.setText("7");

        jLabel6.setText("Largo");

        jLabel7.setText("Modelo");

        jTextFieldModelo.setText("Cafe");

        jTextFieldMaterial.setText("Porcelana");

        jTextFieldCapacidad.setText("300");

        jLabel8.setText("Material");

        jLabel9.setText("Capacidad");

        jButtonIngresar.setText("Ingresar");
        jButtonIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIngresarActionPerformed(evt);
            }
        });

        jTableIngresos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableIngresos);

        jTextFieldCantidad.setText("345");

        jLabel10.setText("Cantidad");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTextFieldMaterial, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldModelo, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldCalidad, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldColor, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jTextFieldAlto, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jTextFieldAncho, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jTextFieldLargo, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6))))
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldCapacidad))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldCantidad, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonIngresar)
                        .addGap(31, 31, 31)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldCalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonIngresar)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldAlto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldAncho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldLargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(28, 28, 28)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8)
                        .addGap(20, 20, 20)
                        .addComponent(jTextFieldMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldCapacidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldAnchoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldAnchoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldAnchoActionPerformed

    private void jTextFieldColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldColorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldColorActionPerformed

    private void jButtonIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIngresarActionPerformed
        //Conexion a la base de datos
        connect();

        //Recuperación de la infomación de las cajas de texto 
        String Calidad = jTextFieldCalidad.getText().trim();
        String Color = jTextFieldColor.getText().trim();
        String Modelo = jTextFieldModelo.getText().trim();
        String Material = jTextFieldMaterial.getText().trim();
        String Capacidad = jTextFieldCapacidad.getText().trim();
        String Cantidad = jTextFieldCantidad.getText().trim();
        String Alto = jTextFieldAlto.getText().trim();
        String Ancho = jTextFieldAncho.getText().trim();
        String Largo = jTextFieldLargo.getText().trim();

        //Validación de letras y numeros
        if (ValidacionLetras(Calidad) || ValidacionLetras(Color) || ValidacionLetras(Modelo) || ValidacionLetras(Material)
                || ValidacionNumeros(Capacidad) || ValidacionNumeros(Cantidad) || ValidacionNumeros(Ancho)
                || ValidacionNumeros(Largo) || ValidacionNumeros(Alto)) {
            JOptionPane.showMessageDialog(null, "Verificar Datos");
        } else {
            //Funcion para el ingreso de Datos
            IngresarRegistro(Calidad, Color, Modelo, Material, Capacidad, Cantidad, Alto, Ancho, Largo);
        }

        //Cierre de la conexion a la Base de Datos
        close();
    }//GEN-LAST:event_jButtonIngresarActionPerformed

    //Validacion de solo letras
    private boolean ValidacionLetras(String Cadena) {
        if (!Cadena.matches("[a-zA-Z]+")) {
            return true;
        } else {
            return false;
        }
    }

    //Validacion de solo numeros
    private boolean ValidacionNumeros(String Cadena) {
        if (!Cadena.matches("\\d*")) {
            return true;
        } else {
            return false;
        }
    }
//Funcion para el ingreso del nuevo registro en la tabla almacen

    private void IngresarRegistro(String Calidad, String Color, String Modelo, String Material, String Capacidad, String Cantidad, String Alto, String Ancho, String Largo) {
        //Buscar los ID de cada campo
        Integer IDCalidad = EncontrarIDCalidad(Calidad);
        Integer IDColor = EncontrarIDColor(Color);
        Integer IDModelo = EncontrarIDModelo(Modelo);
        Integer IDMaterial = EncontrarIDMaterial(Material);
        Integer IDCapacidad = EncontrarIDCapacidad(Capacidad);
        Integer IDDimension = EncontrarIDDimensiones(Alto, Ancho, Largo);

        //Verificar cada ID y en caso de no encontrarlo insertar un registro nuevo
        if (IDCalidad < 0) {
            InsertarCalidad(Calidad);
            IDCalidad = EncontrarIDCalidad(Calidad);
        }
        if (IDColor < 0) {
            InsertarColor(Color);
            IDColor = EncontrarIDColor(Color);
        }
        if (IDModelo < 0) {
            InsertarModelo(Modelo);
            IDModelo = EncontrarIDModelo(Modelo);
        }
        if (IDMaterial < 0) {
            InsertarMaterial(Material);
            IDMaterial = EncontrarIDMaterial(Material);
        }
        if (IDCapacidad < 0) {
            InsertarCapacidad(Capacidad);
            IDCapacidad = EncontrarIDCapacidad(Capacidad);
        }
        if (IDDimension < 0) {
            InsertarDimension(Alto, Ancho, Largo);
            IDDimension = EncontrarIDDimensiones(Alto, Ancho, Largo);
        }

        //Busqueda de ID
        Integer IDProducto = BuscarProducto(IDCalidad, IDColor, IDDimension, IDMaterial, IDModelo, IDCapacidad);
        if (IDProducto < 0) {
            //Si no existe el producto se crea uno nuevo con los ID de los campos
            IngresarProducto(IDCalidad, IDColor, IDDimension, IDMaterial, IDModelo, IDCapacidad);
            //Se obtiene el ID del producto que se acaba de crear
            IDProducto = BuscarProducto(IDCalidad, IDColor, IDDimension, IDMaterial, IDModelo, IDCapacidad);
            //Se ingresa el nuevo producto en el amacen
            IngresarAlmacen(IDProducto, Cantidad);
        } else {
            //si se enconro el producto se procede hacer la actualización del inventario
            String Query = "select Cantidad "
                    + "from Almacen "
                    + "INNER JOIN Producto on Almacen.IDProducto = Producto.IDProducto "
                    + "INNER JOIN Color on Producto.IDColor = Color.IDColor "
                    + "INNER JOIN Calidad on Producto.IDCalidad = Calidad.IDCalidad "
                    + "INNER JOIN Capacidad on Producto.IDCapacidad = Capacidad.IDCapacidad "
                    + "INNER JOIN Modelo on Producto.IDModelo = Modelo.IDModelo "
                    + "INNER JOIN Material on Producto.IDMaterial = Material.IDMaterial "
                    + "INNER JOIN Dimensiones on Producto.IDDimensiones = Dimensiones.IDDimensiones "
                    + "where Color.Color ='" + Color + "' AND Calidad.Calidad='" + Calidad + "' AND Capacidad.Capacidad='" + Capacidad + "'"
                    + " AND Modelo.Modelo='" + Modelo + "' AND Material.Material='" + Material + "' AND Alto=" + Alto
                    + " AND Ancho=" + Ancho + " AND Largo=" + Largo;

            ResultSet result = null;

            //se obtiene la cantidad anterior
            Integer CantidadOriginal = -1;
            try {
                PreparedStatement st = connect.prepareStatement(Query);
                result = st.executeQuery();
                while (result.next()) {
                    CantidadOriginal = Integer.valueOf(result.getString("Cantidad"));
                }
            } catch (SQLException ex) {
                Logger.getLogger(Egresos.class.getName()).log(Level.SEVERE, null, ex);
            }

            //Se suma la nueva cantidad a la vieja
            Integer Ingreso = Integer.valueOf(this.jTextFieldCantidad.getText());
            Ingreso = CantidadOriginal + Ingreso;

            String Consulta = "update Almacen"
                    + " set Cantidad = " + Ingreso.toString()
                    + " where Almacen.IDProducto = (select Producto.IDProducto"
                    + " from Almacen"
                    + " INNER JOIN Producto on Almacen.IDProducto = Producto.IDProducto"
                    + " INNER JOIN Color on Producto.IDColor = Color.IDColor "
                    + " INNER JOIN Calidad on Producto.IDCalidad = Calidad.IDCalidad "
                    + " INNER JOIN Capacidad on Producto.IDCapacidad = Capacidad.IDCapacidad "
                    + " INNER JOIN Modelo on Producto.IDModelo = Modelo.IDModelo"
                    + " INNER JOIN Material on Producto.IDMaterial = Material.IDMaterial "
                    + " INNER JOIN Dimensiones on Producto.IDDimensiones = Dimensiones.IDDimensiones"
                    + " where Color.Color ='" + Color + "' AND Calidad.Calidad='" + Calidad + "' AND Capacidad.Capacidad='" + Capacidad + "'"
                    + " AND Modelo.Modelo='" + Modelo + "' AND Material.Material='" + Material + "' AND Alto=" + Alto
                    + " AND Ancho=" + Ancho + " AND Largo=" + Largo + ")";

            //Se hace la actualizacion de la cantidad
            try {
                PreparedStatement st = connect.prepareStatement(Consulta);
                st = connect.prepareStatement(Consulta);
                st.execute();
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }

        }
        //Mensaje de aviso
        JOptionPane.showMessageDialog(null, "Ingreso realizado");

        //Se actualiza la tabla con la nueva información
        RellenarTabla();
    }

    //Consulta para ingresar nuevos registros al almacen
    private void IngresarAlmacen(Integer IDProducto, String Cantidad) {
        try {
            PreparedStatement st = connect.prepareStatement("insert into Almacen values (?,?,?)");
            st.setString(1, null);
            st.setString(2, IDProducto.toString());
            st.setString(3, Cantidad);
            st.execute();
        } catch (SQLException ex) {
            System.err.println(ex.getMessage());
        }
    }

    //Consulta para ingresar nuevos productos
    private void IngresarProducto(Integer IDCalidad, Integer IDColor, Integer IDDimension, Integer IDMaterial, Integer IDModelo, Integer IDCapacidad) {
        try {
            PreparedStatement st = connect.prepareStatement("insert into Producto values (?,?,?,?,?,?,?)");
            st.setString(1, null);
            st.setString(2, IDCalidad.toString());
            st.setString(3, IDColor.toString());
            st.setString(4, IDDimension.toString());
            st.setString(5, IDMaterial.toString());
            st.setString(6, IDModelo.toString());
            st.setString(7, IDCapacidad.toString());
            st.execute();
        } catch (SQLException ex) {
            System.err.println(ex.getMessage());
        }
    }

    //Buscar ID con base a los campos llenados del formulario
    private Integer BuscarProducto(Integer IDCalidad, Integer IDColor, Integer IDDimension, Integer IDMaterial, Integer IDModelo, Integer IDCapacidad) {
        String Consulta = "Select * from Producto "
                + "where IDCalidad=" + IDCalidad + " AND IDColor=" + IDColor + " "
                + "AND IDDimensiones=" + IDDimension + " AND IDMaterial=" + IDMaterial + " "
                + "AND IDModelo=" + IDModelo + " AND IDCapacidad=" + IDCapacidad + "";

        ResultSet result = null;
        Integer ID = -1;
        try {
            PreparedStatement st = connect.prepareStatement(Consulta);
            result = st.executeQuery();
            while (result.next()) {
                ID = result.getInt("IDProducto");
            }
        } catch (SQLException ex) {
            System.err.println(ex.getMessage());
        }
        return ID;
    }

    //consulta para ingresar nuevo tipos de calidades
    private void InsertarCalidad(String Criterio) {
        try {
            String Consulta = "Insert into Calidad values (null,'" + Criterio + "')";
            PreparedStatement st = connect.prepareStatement(Consulta);
            st.execute();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error en el campo Calidad");
            System.err.println(ex.getMessage());
        }
    }

    //consulta para ingresar nuevos colores
    private void InsertarColor(String Criterio) {
        try {
            String Consulta = "Insert into Color values (null,'" + Criterio + "')";
            PreparedStatement st = connect.prepareStatement(Consulta);
            st.execute();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error en el campo Color");
            System.err.println(ex.getMessage());
        }
    }

    //consulta para ingresar nuevo tipos de modelos
    private void InsertarModelo(String Criterio) {
        try {
            String Consulta = "Insert into Modelo values (null,'" + Criterio + "')";
            PreparedStatement st = connect.prepareStatement(Consulta);
            st.execute();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error en el campo Modelo");
            System.err.println(ex.getMessage());
        }
    }

    //consulta para ingresar nuevo tipos de materiales
    private void InsertarMaterial(String Criterio) {
        try {
            String Consulta = "Insert into Material values (null,'" + Criterio + "')";
            PreparedStatement st = connect.prepareStatement(Consulta);
            st.execute();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error en el campo Material");
            System.err.println(ex.getMessage());
        }
    }

    //consulta para ingresar nuevo tipos de capacidades
    private void InsertarCapacidad(String Criterio) {
        try {
            String Consulta = "Insert into Capacidad values (null,'" + Criterio + "')";
            PreparedStatement st = connect.prepareStatement(Consulta);
            st.execute();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error en el campo Capacidad");
            System.err.println(ex.getMessage());
        }
    }

    //consulta para ingresar nuevas dimensiones
    private void InsertarDimension(String Alto, String Ancho, String Largo) {
        try {
            String Consulta = "Insert into Dimensiones (IDDimensiones, Alto, Ancho, Largo) values (null,'" + Alto + "', '" + Ancho + "', '" + Largo + "')";
            PreparedStatement st = connect.prepareStatement(Consulta);
            st.execute();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error en el campo Dimensiones");
            System.err.println(ex.getMessage());
        }
    }

    //Consulta para encontrar el ID del campo calidad
    private Integer EncontrarIDCalidad(String Criterio) {
        ResultSet result = null;
        Integer ID = -1;
        try {
            String Consulta = "select IDCalidad from Calidad where Calidad.Calidad = '" + Criterio + "'";
            PreparedStatement st = connect.prepareStatement(Consulta);
            result = st.executeQuery();
            while (result.next()) {
                ID = result.getInt("IDCalidad");
            }
        } catch (SQLException ex) {
            System.err.println(ex.getMessage());
        }
        return ID;
    }

    //Consulta para encontrar el ID del campo color
    private Integer EncontrarIDColor(String Criterio) {
        ResultSet result = null;
        Integer ID = -1;
        try {
            String Consulta = "select IDColor from Color where Color.Color = '" + Criterio + "'";
            PreparedStatement st = connect.prepareStatement(Consulta);
            result = st.executeQuery();
            while (result.next()) {
                ID = result.getInt("IDColor");
            }
        } catch (SQLException ex) {
            System.err.println(ex.getMessage());
        }
        return ID;
    }

    //Consulta para encontrar el ID del campo Modelo
    private Integer EncontrarIDModelo(String Criterio) {
        ResultSet result = null;
        Integer ID = -1;
        try {
            String Consulta = "select IDModelo from Modelo where Modelo.Modelo = '" + Criterio + "'";
            PreparedStatement st = connect.prepareStatement(Consulta);
            result = st.executeQuery();
            while (result.next()) {
                ID = result.getInt("IDModelo");
            }
        } catch (SQLException ex) {
            System.err.println(ex.getMessage());
        }
        return ID;
    }

    //Consulta para encontrar el ID del campo Material
    private Integer EncontrarIDMaterial(String Criterio) {
        ResultSet result = null;
        Integer ID = -1;
        try {
            String Consulta = "select IDMaterial from Material where Material.Material = '" + Criterio + "'";
            PreparedStatement st = connect.prepareStatement(Consulta);
            result = st.executeQuery();
            while (result.next()) {
                ID = result.getInt("IDMaterial");
            }
        } catch (SQLException ex) {
            System.err.println(ex.getMessage());
        }
        return ID;
    }

    //Consulta para encontrar el ID del campo Capacidad
    private Integer EncontrarIDCapacidad(String Criterio) {
        ResultSet result = null;
        Integer ID = -1;
        try {
            String Consulta = "select IDCapacidad from Capacidad where Capacidad.Capacidad = '" + Criterio + "'";
            PreparedStatement st = connect.prepareStatement(Consulta);
            result = st.executeQuery();
            while (result.next()) {
                ID = result.getInt("IDCapacidad");
            }
        } catch (SQLException ex) {
            System.err.println(ex.getMessage());
        }
        return ID;
    }

    //Consulta para encontrar el ID del campo Dimensiones
    private Integer EncontrarIDDimensiones(String Alto, String Ancho, String Largo) {
        ResultSet result = null;
        Integer ID = -1;
        try {
            String Consulta = "select IDDimensiones from Dimensiones where Alto = '" + Alto + "' AND Ancho ='" + Ancho
                    + "' AND Largo='" + Largo + "'";
            PreparedStatement st = connect.prepareStatement(Consulta);
            result = st.executeQuery();
            while (result.next()) {
                ID = result.getInt("IDDimensiones");
            }
        } catch (SQLException ex) {
            System.err.println(ex.getMessage());
        }
        return ID;
    }

    //Funcion para actualizar todos los campos de la tabla
    private void RellenarTabla() {
        //Abrir conexion a base de datos
        connect();

        //Informacion de los campos de la cabezara de la tabla
        Integer NoColumnas = 10;
        String[] columnNames = new String[NoColumnas];
        columnNames[0] = "ID Producto";
        columnNames[1] = "Cantidad";
        columnNames[2] = "Color";
        columnNames[3] = "Calidad";
        columnNames[4] = "Capacidad";
        columnNames[5] = "Modelo";
        columnNames[6] = "Material";
        columnNames[7] = "Alto";
        columnNames[8] = "Ancho";
        columnNames[9] = "Largo";

        LinkedList<String[]> Filas = new LinkedList<>();
        ResultSet result = null;

        //Consulta para recuperar la informacion de la tabla almacen 
        try {
            PreparedStatement st = connect.prepareStatement("select Producto.IDProducto as \"ID Producto\", "
                    + "Almacen.Cantidad, Color.Color, Calidad.Calidad, Capacidad.Capacidad, Modelo.Modelo, "
                    + "Material.Material, tamaño.Ancho, tamaño.Alto, tamaño.Largo from Almacen "
                    + "INNER JOIN Producto on Almacen.IDProducto = Producto.IDProducto "
                    + "INNER JOIN Color on Producto.IDColor = Color.IDColor "
                    + "INNER JOIN Calidad on Producto.IDCalidad = Calidad.IDCalidad "
                    + "INNER JOIN Capacidad on Producto.IDCapacidad = Capacidad.IDCapacidad "
                    + "INNER JOIN Modelo on Producto.IDModelo = Modelo.IDModelo "
                    + "INNER JOIN Material on Producto.IDMaterial = Material.IDMaterial "
                    + "INNER JOIN Dimensiones as \"tamaño\" on Producto.IDDimensiones = tamaño.IDDimensiones");
            result = st.executeQuery();
            //Rellenar la tabla con lo ingresado en la base de datos 
            while (result.next()) {
                String[] Fila = new String[NoColumnas];
                Fila[0] = result.getString("ID Producto");
                Fila[1] = result.getString("Cantidad");
                Fila[2] = result.getString("Color");
                Fila[3] = result.getString("Calidad");
                Fila[4] = result.getString("Capacidad");
                Fila[5] = result.getString("Modelo");
                Fila[6] = result.getString("Material");
                Fila[7] = result.getString("Alto");
                Fila[8] = result.getString("Ancho");
                Fila[9] = result.getString("Largo");
                Filas.add(Fila);
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

        //Matriz con la información de cabezara y filas de la tabla
        Object Datos[][] = new Object[Filas.size()][NoColumnas];
        for (int i = 0; i < Filas.size(); i++) {
            Datos[i] = Filas.get(i);
        }

        //instancia de la tabla con su desplegue
        DefaultTableModel modelo = new DefaultTableModel();
        jTableIngresos.setModel(modelo);
        modelo.setDataVector(Datos, columnNames);

        //cierre de conexion a base de datos
        close();
    }

    //Funcion para conectara la Base de Datos
    public void connect() {
        try {
            connect = DriverManager.getConnection("jdbc:sqlite:" + url);
            if (connect != null) {
//                System.out.println("Conectado");
            }
        } catch (SQLException ex) {
            System.err.println("No se ha podido conectar a la base de datos\n" + ex.getMessage());
        }
    }

    //Funcion para cerrar la conexion a la BAse de Datos
    public void close() {
        try {
            connect.close();
        } catch (SQLException ex) {
            Logger.getLogger(Ingresos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonIngresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableIngresos;
    private javax.swing.JTextField jTextFieldAlto;
    private javax.swing.JTextField jTextFieldAncho;
    private javax.swing.JTextField jTextFieldCalidad;
    private javax.swing.JTextField jTextFieldCantidad;
    private javax.swing.JTextField jTextFieldCapacidad;
    private javax.swing.JTextField jTextFieldColor;
    private javax.swing.JTextField jTextFieldLargo;
    private javax.swing.JTextField jTextFieldMaterial;
    private javax.swing.JTextField jTextFieldModelo;
    // End of variables declaration//GEN-END:variables
}
